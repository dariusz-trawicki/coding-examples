main:
  steps:
    - init:
        assign:
          - project_name: ${sys.get_env("project_name")}
          - project_id: ${sys.get_env("project_id")}
          - sql_instance_name: ${sys.get_env("sql_instance_name")}
          - dbs: ${json.decode(sys.get_env("dbs"))}
          - users: ${json.decode(sys.get_env("users"))}

    - call_subworkflow_create_sql_dbs:
        call: subworkflow_create_sql_dbs
        args:
          dbs: ${dbs}
          project_id: ${project_id}
          sql_instance_name: ${sql_instance_name}

    - call_subworkflow_create_sql_users:
        call: subworkflow_create_sql_users
        args:
          users: ${users}
          project_id: ${project_id}
          sql_instance_name: ${sql_instance_name}

    - call_subworkflow_delete_sql_dbs:
        call: subworkflow_delete_sql_dbs
        args:
          dbs: ${dbs}
          project_id: ${project_id}
          sql_instance_name: ${sql_instance_name}

    - call_subworkflow_delete_sql_users:
        call: subworkflow_delete_sql_users
        args:
          users: ${users}
          project_id: ${project_id}
          sql_instance_name: ${sql_instance_name}

    - return_message:
        return: "END"

subworkflow_create_sql_dbs:
  params: [dbs, project_id, sql_instance_name]
  steps:
    - create_dbs_loop:
        for:
          value: db
          in: ${dbs}
          steps:
            - create_db:
                call: http.post
                args:
                  url: ${"https://sqladmin.googleapis.com/sql/v1beta4/projects/" + project_id + "/instances/" + sql_instance_name + "/databases"}
                  auth:
                    type: OAuth2
                  body:
                    name: ${db}

subworkflow_create_sql_users:
  params: [users, project_id, sql_instance_name]
  steps:
    - create_users_loop:
        for:
          value: user
          in: ${users}
          steps:
            - create_user:
                call: http.post
                args:
                  url: ${"https://sqladmin.googleapis.com/sql/v1beta4/projects/" + project_id + "/instances/" + sql_instance_name + "/users"}
                  auth:
                    type: OAuth2
                  body:
                    name: ${user.name}
                    password: ${user.password}

subworkflow_delete_sql_dbs:
  params: [dbs, project_id, sql_instance_name]
  steps:
    - delete_dbs_loop:
        for:
          value: db
          in: ${dbs}
          steps:
            - delete_db:
                call: http.delete
                args:
                  url: ${"https://sqladmin.googleapis.com/sql/v1beta4/projects/" + project_id + "/instances/" + sql_instance_name + "/databases/" + db}
                  auth:
                    type: OAuth2

subworkflow_delete_sql_users:
  params: [users, project_id, sql_instance_name]
  steps:
    - delete_users_loop:
        for:
          value: user
          in: ${users}
          steps:
            - delete_user:
                call: http.delete
                args:
                  url: ${"https://sqladmin.googleapis.com/sql/v1beta4/projects/" + project_id + "/instances/" + sql_instance_name + "/users?name=" + user.name + "&host=%"}
                  auth:
                    type: OAuth2
