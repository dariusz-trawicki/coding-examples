apiVersion: v1
kind: Namespace
metadata:
  name: mlflow

---
apiVersion: v1
kind: Secret
metadata:
  name: minio-secret
  namespace: mlflow
type: Opaque
stringData:
  MINIO_ROOT_USER: minioadmin
  MINIO_ROOT_PASSWORD: minioadmin
  AWS_ACCESS_KEY_ID: minioadmin
  AWS_SECRET_ACCESS_KEY: minioadmin

---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: mlflow
type: Opaque
stringData:
  POSTGRES_USER: mlflow
  POSTGRES_PASSWORD: mlflow
  POSTGRES_DB: mlflow

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mlflow-config
  namespace: mlflow
data:
  MLFLOW_BUCKET: mlflow
  MLFLOW_PORT: "5000"
  # URI do Postgresa (backend store)
  BACKEND_STORE_URI: postgresql+psycopg2://mlflow:mlflow_password_change_me@postgres.mlflow.svc.cluster.local:5432/mlflow
  # Endpoint MinIO (artifact store)
  MLFLOW_S3_ENDPOINT_URL: http://minio.mlflow.svc.cluster.local:9000

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: mlflow
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 2Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: mlflow
spec:
  replicas: 1
  selector: { matchLabels: { app: postgres } }
  template:
    metadata:
      labels: { app: postgres }
    spec:
      containers:
        - name: postgres
          image: postgres:16
          ports: [{ containerPort: 5432 }]
          envFrom:
            - secretRef: { name: postgres-secret }
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
          readinessProbe:
            exec: { command: ["pg_isready","-U","mlflow","-d","mlflow"] }
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: data
          persistentVolumeClaim: { claimName: postgres-pvc }
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: mlflow
spec:
  selector: { app: postgres }
  ports:
    - name: db
      port: 5432
      targetPort: 5432

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: minio-pvc
  namespace: mlflow
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 5Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: minio
  namespace: mlflow
spec:
  replicas: 1
  selector: { matchLabels: { app: minio } }
  template:
    metadata:
      labels: { app: minio }
    spec:
      containers:
        - name: minio
          image: minio/minio:latest
          args: ["server","/data","--address",":9000","--console-address",":9001"]
          ports:
            - { containerPort: 9000, name: s3 }
            - { containerPort: 9001, name: console }
          envFrom:
            - secretRef: { name: minio-secret }
          volumeMounts:
            - name: data
              mountPath: /data
          readinessProbe:
            httpGet: { path: /minio/health/live, port: 9000 }
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: data
          persistentVolumeClaim: { claimName: minio-pvc }
---
apiVersion: v1
kind: Service
metadata:
  name: minio
  namespace: mlflow
spec:
  selector: { app: minio }
  ports:
    - { name: s3, port: 9000, targetPort: 9000 }
    - { name: console, port: 9001, targetPort: 9001 }

---
# One-time job to create the bucket for MLflow
---
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-setup
  namespace: mlflow
spec:
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: mc
          image: minio/mc:latest
          envFrom:
            - secretRef:
                name: minio-secret
            - configMapRef:
                name: mlflow-config
          env:
            - name: MINIO_BUCKET
              valueFrom:
                configMapKeyRef:
                  name: mlflow-config
                  key: MLFLOW_BUCKET
          command: ["/bin/sh","-c"]
          args:
            - |
              set -e
              mc alias set local http://minio.mlflow.svc.cluster.local:9000 "$MINIO_ROOT_USER" "$MINIO_ROOT_PASSWORD"
              mc mb -p local/"$MINIO_BUCKET" || true
              echo "Bucket $MINIO_BUCKET ready"


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mlflow
  namespace: mlflow
spec:
  replicas: 1
  selector: { matchLabels: { app: mlflow } }
  template:
    metadata:
      labels: { app: mlflow }
    spec:
      containers:
        - name: mlflow
          # jeśli wolisz swój obraz, podmień tutaj
          image: ghcr.io/mlflow/mlflow:latest
          ports:
            - { containerPort: 5000, name: http }
          envFrom:
            - secretRef: { name: minio-secret }
            - secretRef: { name: postgres-secret }
            - configMapRef: { name: mlflow-config }
          # Do niektórych tagów potrzeba psycopg2/boto3 – doinstaluj w entrypoint
          command: ["/bin/sh","-c"]
          args:
            - |
              pip install --no-cache-dir psycopg2-binary boto3 || true
              mlflow server \
                --host 0.0.0.0 \
                --port ${MLFLOW_PORT} \
                --backend-store-uri "${BACKEND_STORE_URI}" \
                --artifacts-destination s3://${MLFLOW_BUCKET}
          readinessProbe:
            httpGet: { path: /, port: 5000 }
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: mlflow
  namespace: mlflow
spec:
  selector: { app: mlflow }
  ports:
    - { name: http, port: 5000, targetPort: 5000 }
  type: ClusterIP
