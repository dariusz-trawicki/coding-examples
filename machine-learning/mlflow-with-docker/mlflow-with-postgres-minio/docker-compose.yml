services:
  postgres:
    image: postgres:16
    container_name: mlflow-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 20
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: mlflow-minio
    command: ["server","/data","--address",":9000","--console-address",":9001"]
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"  # S3 API
      - "9001:9001"  # MinIO Console (GUI)
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 30
    restart: unless-stopped

  # One-time job to create the bucket for MLflow
  minio-setup:
    image: minio/mc:latest
    container_name: mlflow-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb -p local/${MLFLOW_BUCKET} || true &&
      echo 'MinIO bucket ready'
      "
    restart: "no"

  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    container_name: mlflow-server
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
    environment:
      BACKEND_STORE_URI: ${BACKEND_STORE_URI}
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      MLFLOW_UI_BIND_ADDRESS: 0.0.0.0
    command: ["mlflow","server",
      "--host","0.0.0.0",
      "--port","${MLFLOW_PORT}",
      "--backend-store-uri","${BACKEND_STORE_URI}",
      "--artifacts-destination","s3://${MLFLOW_BUCKET}"
    ]
    ports:
      - "${MLFLOW_PORT}:${MLFLOW_PORT}"
    restart: unless-stopped

volumes:
  pgdata:
  minio_data:
