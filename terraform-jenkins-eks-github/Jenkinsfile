pipeline {
    agent any
    environment {
        AWS_DEFAULT_REGION = "eu-central-1"
    }
    stages {
        stage('Checkout SCM') {
            steps {
                script {
                    checkout scmGit(
                        branches: [[name: '*/main']],
                        extensions: [],
                        userRemoteConfigs: [[url: 'https://github.com/dariusz-trawicki/terraform-jenkins-eks.git']]
                    )
                }
            }
        }
        stage('Initializing Terraform') {
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    dir('eks') {
                        sh 'terraform init'
                    }
                }
            }
        }
        stage('Formatting Terraform Code') {
            steps {
                dir('eks') {
                    sh 'terraform fmt'
                }
            }
        }
        stage('Validating Terraform') {
            steps {
                dir('eks') {
                    sh 'terraform validate'
                }
            }
        }
        stage('Previewing the Infra using Terraform') {
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    dir('eks') {
                        sh 'terraform plan'
                    }
                    input(message: "Are you sure to proceed?", ok: "Proceed")
                }
            }
        }
        stage('Creating/Destroying an EKS Cluster') {
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    dir('eks') {
                        sh 'terraform $action --auto-approve'
                    }
                }
            }
        }
        stage('Deploying Nginx Application') {
            steps {
                withCredentials([
                    string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                    string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    dir('eks/configuration-files') {
                        sh 'aws eks update-kubeconfig --name eks-example-cluster'
                        sh '''
                        aws eks create-access-entry \
                          --cluster-name eks-example-cluster \
                          --region eu-central-1 \
                          --principal-arn arn:aws:iam::AWS_ACCOUNT_NUMBER:user/USER_ID || true
        
                        aws eks associate-access-policy \
                          --cluster-name eks-example-cluster \
                          --region eu-central-1 \
                          --principal-arn arn:aws:iam::AWS_ACCOUNT_NUMBER:user/USER_ID \
                          --policy-arn arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy \
                          --access-scope type=cluster || true
                        '''
                        sh 'kubectl apply -f deployment.yaml'
                        sh 'kubectl apply -f service.yaml'
                    }
                }
            }
        }
    }
}
